--
-- PostgreSQL database dump
--

-- Dumped from database version 10.1
-- Dumped by pg_dump version 10.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'WIN1251';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

SET search_path = public, pg_catalog;

ALTER TABLE ONLY public.wfstp_step DROP CONSTRAINT fk_wfstp_step_on_workflow;
ALTER TABLE ONLY public.wfstp_step DROP CONSTRAINT fk_wfstp_step_on_stage;
ALTER TABLE ONLY public.wfstp_step_direction DROP CONSTRAINT fk_wfstp_step_direction_on_to;
ALTER TABLE ONLY public.wfstp_step_direction DROP CONSTRAINT fk_wfstp_step_direction_on_from;
ALTER TABLE ONLY public.stage_actors_link DROP CONSTRAINT fk_staact_on_user;
ALTER TABLE ONLY public.stage_actors_link DROP CONSTRAINT fk_staact_on_stage;
DROP INDEX public.idx_wfstp_step_on_workflow;
DROP INDEX public.idx_wfstp_step_on_stage;
DROP INDEX public.idx_wfstp_step_direction_on_to;
DROP INDEX public.idx_wfstp_step_direction_on_from;
ALTER TABLE ONLY public.wfstp_workflow DROP CONSTRAINT wfstp_workflow_pkey;
ALTER TABLE ONLY public.wfstp_step DROP CONSTRAINT wfstp_step_pkey;
ALTER TABLE ONLY public.wfstp_step_direction DROP CONSTRAINT wfstp_step_direction_pkey;
ALTER TABLE ONLY public.wfstp_stage DROP CONSTRAINT wfstp_stage_pkey;
ALTER TABLE ONLY public.stage_actors_link DROP CONSTRAINT stage_actors_link_pkey;
DROP TABLE public.wfstp_workflow;
DROP TABLE public.wfstp_step_direction;
DROP TABLE public.wfstp_step;
DROP TABLE public.wfstp_stage;
DROP TABLE public.stage_actors_link;
SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: stage_actors_link; Type: TABLE; Schema: public; Owner: cuba
--

CREATE TABLE stage_actors_link (
    stage_id uuid NOT NULL,
    actor_id uuid NOT NULL
);


ALTER TABLE stage_actors_link OWNER TO cuba;

--
-- Name: wfstp_stage; Type: TABLE; Schema: public; Owner: cuba
--

CREATE TABLE wfstp_stage (
    id uuid NOT NULL,
    version integer NOT NULL,
    create_ts timestamp without time zone,
    created_by character varying(50),
    update_ts timestamp without time zone,
    updated_by character varying(50),
    delete_ts timestamp without time zone,
    deleted_by character varying(50),
    name character varying(255) NOT NULL,
    entity_name character varying(255) NOT NULL,
    type integer NOT NULL,
    execution_groovy_script text,
    browse_screen_groovy_script text,
    editor_screen_groovy_script text
);


ALTER TABLE wfstp_stage OWNER TO cuba;

--
-- Name: wfstp_step; Type: TABLE; Schema: public; Owner: cuba
--

CREATE TABLE wfstp_step (
    id uuid NOT NULL,
    version integer NOT NULL,
    create_ts timestamp without time zone,
    created_by character varying(50),
    update_ts timestamp without time zone,
    updated_by character varying(50),
    delete_ts timestamp without time zone,
    deleted_by character varying(50),
    order_ integer,
    stage_id uuid NOT NULL,
    workflow_id uuid NOT NULL
);


ALTER TABLE wfstp_step OWNER TO cuba;

--
-- Name: wfstp_step_direction; Type: TABLE; Schema: public; Owner: cuba
--

CREATE TABLE wfstp_step_direction (
    id uuid NOT NULL,
    version integer NOT NULL,
    create_ts timestamp without time zone,
    created_by character varying(50),
    update_ts timestamp without time zone,
    updated_by character varying(50),
    delete_ts timestamp without time zone,
    deleted_by character varying(50),
    order_ integer,
    from_id uuid NOT NULL,
    to_id uuid NOT NULL,
    condition_sql_script text,
    condition_xml text,
    condition_groovy_script text
);


ALTER TABLE wfstp_step_direction OWNER TO cuba;

--
-- Name: wfstp_workflow; Type: TABLE; Schema: public; Owner: cuba
--

CREATE TABLE wfstp_workflow (
    id uuid NOT NULL,
    version integer NOT NULL,
    create_ts timestamp without time zone,
    created_by character varying(50),
    update_ts timestamp without time zone,
    updated_by character varying(50),
    delete_ts timestamp without time zone,
    deleted_by character varying(50),
    name character varying(255) NOT NULL,
    active boolean,
    entity_name character varying(255) NOT NULL
);


ALTER TABLE wfstp_workflow OWNER TO cuba;

--
-- Data for Name: stage_actors_link; Type: TABLE DATA; Schema: public; Owner: cuba
--

COPY stage_actors_link (stage_id, actor_id) FROM stdin;
e025c436-c147-2d40-96f2-134768cfcf9b	60885987-1b61-4247-94c7-dff348347f93
9bc50a3a-e0d4-d548-b032-2ec89a13d37d	60885987-1b61-4247-94c7-dff348347f93
0eb1036e-aac4-3004-d496-7aaf33643a8c	60885987-1b61-4247-94c7-dff348347f93
a5ed34af-bc1c-c7ea-1d1b-ca4bc1cb5731	60885987-1b61-4247-94c7-dff348347f93
0d6b103d-91b6-fa30-f7e0-33d0556863dc	60885987-1b61-4247-94c7-dff348347f93
fe1970bd-a3e6-c553-50f2-f38d85e85f1f	60885987-1b61-4247-94c7-dff348347f93
cd5586ef-17e8-0bee-0c2e-b5575274b39b	60885987-1b61-4247-94c7-dff348347f93
\.


--
-- Data for Name: wfstp_stage; Type: TABLE DATA; Schema: public; Owner: cuba
--

COPY wfstp_stage (id, version, create_ts, created_by, update_ts, updated_by, delete_ts, deleted_by, name, entity_name, type, execution_groovy_script, browse_screen_groovy_script, editor_screen_groovy_script) FROM stdin;
895cde91-a6e7-5004-47f5-bb45bf349324	2	2018-08-23 13:29:30.148	admin	2018-08-23 13:29:35.828	admin	\N	\N	Получен	cifra$Document	2	true	\N	\N
4a827eb3-e652-fb59-aa84-5e648b18d45c	27	2018-08-23 15:11:17.221	admin	2018-08-23 17:44:19.229	admin	\N	\N	Выбор процесса	cifra$Document	2	import com.groupstp.cifra.entity.*;\nimport com.groupstp.workflowstp.entity.*;\nimport com.haulmont.cuba.core.global.*;\nimport com.groupstp.workflowstp.service.WorkflowService;\n\ntask = workflowInstanceTask;\n\nWorkflowService service = AppBeans.get(WorkflowService.NAME);\n\ntry {\n    String direction = Direction.Income.equals(entity.getDirection()) ? "doc_flow_incoming" : "doc_flow_outgoing"\n    service.finishTask(task, [(Direction.Income.equals(entity.getDirection()) ? "doc_flow_incoming" : "doc_flow_outgoing"):"true"]);\n} catch (Exception e) {\n        throw new RuntimeException("Ошибка обработки заявки", e);\n}\n	\N	\N
0eb1036e-aac4-3004-d496-7aaf33643a8c	7	2018-08-23 15:23:18.005	admin	2018-08-24 16:03:12.772	admin	\N	\N	В работе (заполнение)	cifra$Document	1	\N	import com.groupstp.cifra.entity.*;\nimport com.groupstp.workflowstp.entity.*;\nimport com.haulmont.cuba.gui.components.*;\nimport com.haulmont.cuba.core.global.*;\nimport org.apache.commons.collections4.*;\nimport com.haulmont.cuba.gui.icons.*;\nimport com.haulmont.cuba.gui.xml.layout.*;\nimport com.groupstp.workflowstp.service.WorkflowService;\nimport com.haulmont.cuba.gui.components.actions.*;\nimport com.haulmont.chile.core.model.*;\nimport com.groupstp.workflowstp.dto.*;\nimport java.util.*;\n\nstage = stage;\nworkflow = workflow;\nframe = screen;\n\nmessages = AppBeans.get(Messages.NAME);\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\n\n\nqueriesTable = (Table) frame.getComponentNN("queriesTable");\n\ninitColumns();\ninitActions();\n\n\nprivate void initColumns() {\n    List<String> columnsProperties = Arrays.asList(\n        "company","division","docType","date","contragent",\n        "description","number","dateLoad","problems","fixDue",\n        "warehouse","cell","externalLink","externalId"\n        );\n                \n    List<String> editableProperties = Collections.emptyList();\n    \n    clearAllColumns();\n    showPropertiesColumns(columnsProperties);\n    markAsEditable(editableProperties);\n}\n\nprivate void clearAllColumns() {\n    List<Table.Column> columns = queriesTable.getColumns();\n    if (!CollectionUtils.isEmpty(columns)) {\n        columns = new ArrayList<>(columns);\n        for (Table.Column column : columns) {\n            queriesTable.removeColumn(column);\n        }\n    }\n}\n\nprivate void showPropertiesColumns(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            MetaPropertyPath path = queriesTable.getDatasource().getMetaClass().getPropertyPath(property);\n            Table.Column column = new Table.Column(path, property);\n            column.setType(path.getRangeJavaClass());\n            column.setCaption(messages.getMessage(Document.class, "Document." + property));\n            queriesTable.addColumn(column);\n        }\n    }\n}\n\nprivate void markAsEditable(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            queriesTable.getColumn(property).setEditable(true);\n        }\n    }\n    queriesTable.setEditable(true);\n}\n\nprivate void initActions() {\n    ButtonsPanel buttonsPanel = queriesTable.getButtonsPanel();\n    \n    initSentAction(queriesTable, buttonsPanel, workflow, stage, frame);\n}\n\nprivate void initSentAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("sent") {\n        @Override\n        public String getCaption() {\n            return "Отправить";\n        }\n        \n        @Override\n        public String getIcon() {\n            return CubaIcon.SIGN_OUT.source();\n        }\n        \n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_send":"true"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n        \n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 1);\n    queriesTable.addAction(action);\n}\n\nprivate static WorkflowInstanceTask loadTasks(final Document doc, final Workflow workflow, final Stage stage) {\n    List<WorkflowInstanceTask> list = AppBeans.get(DataManager.NAME).loadList(LoadContext.create(WorkflowInstanceTask.class)\n                .setQuery(new LoadContext.Query("select e from wfstp\\$" + "WorkflowInstanceTask e " +\n                    "join e.instance i " +\n                    "join e.step s " +\n                    "where i.workflow.id = :workflowId and i.entityId = :entityId and s.stage.id = :stageId and s.workflow.id = :workflowId " +\n                    "and e.endDate is null order by e.createTs desc")\n                        .setParameter("workflowId", workflow.getId())\n                        .setParameter("entityId", doc.getId().toString())\n                        .setParameter("stageId", stage.getId())\n                        .setMaxResults(1))\n                .setView("workflowInstanceTask-browse"));\n    if (!CollectionUtils.isEmpty(list)) {\n        return list.get(0);\n    }\n    return null;\n}\n\nprivate static void commitIfNeed(Table<Document> queriesTable) {\n    if (queriesTable.getDatasource().isModified()) {\n        queriesTable.getDatasource().commit();\n    }\n}\n\n	\r\nimport com.groupstp.cifra.entity.*;\r\nimport com.groupstp.workflowstp.entity.*;\r\nimport com.haulmont.cuba.gui.components.*;\r\nimport com.haulmont.cuba.core.global.*;\r\nimport org.apache.commons.collections4.*;\r\nimport com.haulmont.cuba.gui.icons.*;\r\nimport com.haulmont.cuba.gui.xml.layout.*;\r\nimport com.haulmont.cuba.gui.components.actions.*;\r\nimport com.groupstp.workflowstp.service.WorkflowService;\r\nimport java.util.*;\r\n\r\ndoc = entity;\r\ntask = workflowInstanceTask;\r\neditor = screen;\r\ninstance = workflowInstance;\r\n\r\nmessages = AppBeans.get(Messages.NAME);\r\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\r\n\r\ninitFields();\r\ninitActions();\r\n\r\n\r\nprivate void initFields() {\r\n    List<String> editableProperties = Collections.emptyList();\r\n    \r\n    FieldGroup fieldGroup = (FieldGroup) editor.getComponentNN("fieldGroup");\r\n    for (String property : editableProperties) {\r\n        fieldGroup.getFieldNN(property).setEditable(Boolean.TRUE);\r\n    }\r\n}\r\n\r\nprivate void initActions() {\r\n    BoxLayout box = (BoxLayout) editor.getComponentNN("bottomPanel");\r\n    box.remove(box.getComponentNN("windowCommit"));\r\n    \r\n    box.add(initSentAction(doc, task, editor), 0);\r\n}\r\n\r\nprivate Button initSentAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("sent") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "Отправить";\r\n        }\r\n        \r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.SIGN_OUT.source();\r\n        }\r\n        \r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_send":"true"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate static void commit(AbstractEditor editor) {\r\n    if (editor.isModified()) {\r\n        editor.commitAndClose();\r\n    }\r\n}\r\n
a5ed34af-bc1c-c7ea-1d1b-ca4bc1cb5731	6	2018-08-23 17:32:21.803	admin	2018-08-24 16:24:27.047	admin	\N	\N	Входящий	cifra$Document	1	\N	import com.groupstp.cifra.entity.*;\nimport com.groupstp.workflowstp.entity.*;\nimport com.haulmont.cuba.gui.components.*;\nimport com.haulmont.cuba.core.global.*;\nimport org.apache.commons.collections4.*;\nimport com.haulmont.cuba.gui.icons.*;\nimport com.haulmont.cuba.gui.xml.layout.*;\nimport com.groupstp.workflowstp.service.WorkflowService;\nimport com.haulmont.cuba.gui.components.actions.*;\nimport com.haulmont.chile.core.model.*;\nimport com.groupstp.workflowstp.dto.*;\nimport java.util.*;\n\nstage = stage;\nworkflow = workflow;\nframe = screen;\n\nmessages = AppBeans.get(Messages.NAME);\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\n\n\nqueriesTable = (Table) frame.getComponentNN("queriesTable");\n\ninitColumns();\ninitActions();\n\n\nprivate void initColumns() {\n    List<String> columnsProperties = Arrays.asList(\n        "company","division","docType","date","contragent",\n        "description","number","dateLoad","problems","fixDue",\n        "warehouse","cell","externalLink","externalId"\n        );\n                \n    List<String> editableProperties = Collections.emptyList();\n    \n    clearAllColumns();\n    showPropertiesColumns(columnsProperties);\n    markAsEditable(editableProperties);\n}\n\nprivate void clearAllColumns() {\n    List<Table.Column> columns = queriesTable.getColumns();\n    if (!CollectionUtils.isEmpty(columns)) {\n        columns = new ArrayList<>(columns);\n        for (Table.Column column : columns) {\n            queriesTable.removeColumn(column);\n        }\n    }\n}\n\nprivate void showPropertiesColumns(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            MetaPropertyPath path = queriesTable.getDatasource().getMetaClass().getPropertyPath(property);\n            Table.Column column = new Table.Column(path, property);\n            column.setType(path.getRangeJavaClass());\n            column.setCaption(messages.getMessage(Document.class, "Document." + property));\n            queriesTable.addColumn(column);\n        }\n    }\n}\n\nprivate void markAsEditable(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            queriesTable.getColumn(property).setEditable(true);\n        }\n    }\n    queriesTable.setEditable(true);\n}\n\nprivate void initActions() {\n    ButtonsPanel buttonsPanel = queriesTable.getButtonsPanel();\n    \n    initProblemAction(queriesTable, buttonsPanel, workflow, stage, frame);\n    initProcessAction(queriesTable, buttonsPanel, workflow, stage, frame);\n}\n\nprivate void initProblemAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("problem") {\n        @Override\n        public String getCaption() {\n            return "Проблема";\n        }\n\n        @Override\n        public String getIcon() {\n            return CubaIcon.EXCLAMATION.source();\n        }\n\n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_problem":"true"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n\n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 0);\n    queriesTable.addAction(action);\n}\n\nprivate void initProcessAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("process") {\n        @Override\n        public String getCaption() {\n            return "Обработать";\n        }\n        \n        @Override\n        public String getIcon() {\n            return CubaIcon.FORWARD.source();\n        }\n        \n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_processed":"true"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n        \n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 1);\n    queriesTable.addAction(action);\n}\n\nprivate static WorkflowInstanceTask loadTasks(final Document doc, final Workflow workflow, final Stage stage) {\n    List<WorkflowInstanceTask> list = AppBeans.get(DataManager.NAME).loadList(LoadContext.create(WorkflowInstanceTask.class)\n                .setQuery(new LoadContext.Query("select e from wfstp\\$" + "WorkflowInstanceTask e " +\n                    "join e.instance i " +\n                    "join e.step s " +\n                    "where i.workflow.id = :workflowId and i.entityId = :entityId and s.stage.id = :stageId and s.workflow.id = :workflowId " +\n                    "and e.endDate is null order by e.createTs desc")\n                        .setParameter("workflowId", workflow.getId())\n                        .setParameter("entityId", doc.getId().toString())\n                        .setParameter("stageId", stage.getId())\n                        .setMaxResults(1))\n                .setView("workflowInstanceTask-browse"));\n    if (!CollectionUtils.isEmpty(list)) {\n        return list.get(0);\n    }\n    return null;\n}\n\nprivate static void commitIfNeed(Table<Document> queriesTable) {\n    if (queriesTable.getDatasource().isModified()) {\n        queriesTable.getDatasource().commit();\n    }\n}\n\n	\r\nimport com.groupstp.cifra.entity.*;\r\nimport com.groupstp.workflowstp.entity.*;\r\nimport com.haulmont.cuba.gui.components.*;\r\nimport com.haulmont.cuba.core.global.*;\r\nimport org.apache.commons.collections4.*;\r\nimport com.haulmont.cuba.gui.icons.*;\r\nimport com.haulmont.cuba.gui.xml.layout.*;\r\nimport com.haulmont.cuba.gui.components.actions.*;\r\nimport com.groupstp.workflowstp.service.WorkflowService;\r\nimport java.util.*;\r\n\r\ndoc = entity;\r\ntask = workflowInstanceTask;\r\neditor = screen;\r\ninstance = workflowInstance;\r\n\r\nmessages = AppBeans.get(Messages.NAME);\r\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\r\n\r\ninitFields();\r\ninitActions();\r\n\r\n\r\nprivate void initFields() {\r\n    List<String> editableProperties = Collections.emptyList();\r\n    \r\n    FieldGroup fieldGroup = (FieldGroup) editor.getComponentNN("fieldGroup");\r\n    for (String property : editableProperties) {\r\n        fieldGroup.getFieldNN(property).setEditable(Boolean.TRUE);\r\n    }\r\n}\r\n\r\nprivate void initActions() {\r\n    BoxLayout box = (BoxLayout) editor.getComponentNN("bottomPanel");\r\n    box.remove(box.getComponentNN("windowCommit"));\r\n    \r\n    box.add(initProblemAction(doc, task, editor), 0);\r\n    box.add(initProcessAction(doc, task, editor), 1);\r\n}\r\n\r\nprivate Button initProblemAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("problem") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "Проблема";\r\n        }\r\n\r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.EXCLAMATION.source();\r\n        }\r\n\r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_problem":"true"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate Button initProcessAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("process") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "Обработать";\r\n        }\r\n        \r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.FORWARD.source();\r\n        }\r\n        \r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_processed":"true"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate static void commit(AbstractEditor editor) {\r\n    if (editor.isModified()) {\r\n        editor.commitAndClose();\r\n    }\r\n}\r\n
9bc50a3a-e0d4-d548-b032-2ec89a13d37d	12	2018-08-23 13:29:09.37	admin	2018-08-24 16:03:47.454	admin	\N	\N	Отправлен	cifra$Document	1	\N	import com.groupstp.cifra.entity.*;\nimport com.groupstp.workflowstp.entity.*;\nimport com.haulmont.cuba.gui.components.*;\nimport com.haulmont.cuba.core.global.*;\nimport org.apache.commons.collections4.*;\nimport com.haulmont.cuba.gui.icons.*;\nimport com.haulmont.cuba.gui.xml.layout.*;\nimport com.groupstp.workflowstp.service.WorkflowService;\nimport com.haulmont.cuba.gui.components.actions.*;\nimport com.haulmont.chile.core.model.*;\nimport com.groupstp.workflowstp.dto.*;\nimport java.util.*;\n\nstage = stage;\nworkflow = workflow;\nframe = screen;\n\nmessages = AppBeans.get(Messages.NAME);\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\n\n\nqueriesTable = (Table) frame.getComponentNN("queriesTable");\n\ninitColumns();\ninitActions();\n\n\nprivate void initColumns() {\n    List<String> columnsProperties = Arrays.asList(\n        "company","division","docType","date","contragent",\n        "description","number","dateLoad","problems","fixDue",\n        "warehouse","cell","externalLink","externalId"\n        );\n                \n    List<String> editableProperties = Collections.emptyList();\n    \n    clearAllColumns();\n    showPropertiesColumns(columnsProperties);\n    markAsEditable(editableProperties);\n}\n\nprivate void clearAllColumns() {\n    List<Table.Column> columns = queriesTable.getColumns();\n    if (!CollectionUtils.isEmpty(columns)) {\n        columns = new ArrayList<>(columns);\n        for (Table.Column column : columns) {\n            queriesTable.removeColumn(column);\n        }\n    }\n}\n\nprivate void showPropertiesColumns(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            MetaPropertyPath path = queriesTable.getDatasource().getMetaClass().getPropertyPath(property);\n            Table.Column column = new Table.Column(path, property);\n            column.setType(path.getRangeJavaClass());\n            column.setCaption(messages.getMessage(Document.class, "Document." + property));\n            queriesTable.addColumn(column);\n        }\n    }\n}\n\nprivate void markAsEditable(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            queriesTable.getColumn(property).setEditable(true);\n        }\n    }\n    queriesTable.setEditable(true);\n}\n\nprivate void initActions() {\n    ButtonsPanel buttonsPanel = queriesTable.getButtonsPanel();\n    \n    initReceiveAction(queriesTable, buttonsPanel, workflow, stage, frame);\n}\n\nprivate void initReceiveAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("receive") {\n        @Override\n        public String getCaption() {\n            return "Получить";\n        }\n\n        @Override\n        public String getIcon() {\n            return CubaIcon.CHECK.source();\n        }\n\n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_received":"true"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n\n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 0);\n    queriesTable.addAction(action);\n}\n\nprivate static WorkflowInstanceTask loadTasks(final Document doc, final Workflow workflow, final Stage stage) {\n    List<WorkflowInstanceTask> list = AppBeans.get(DataManager.NAME).loadList(LoadContext.create(WorkflowInstanceTask.class)\n                .setQuery(new LoadContext.Query("select e from wfstp\\$" + "WorkflowInstanceTask e " +\n                    "join e.instance i " +\n                    "join e.step s " +\n                    "where i.workflow.id = :workflowId and i.entityId = :entityId and s.stage.id = :stageId and s.workflow.id = :workflowId " +\n                    "and e.endDate is null order by e.createTs desc")\n                        .setParameter("workflowId", workflow.getId())\n                        .setParameter("entityId", doc.getId().toString())\n                        .setParameter("stageId", stage.getId())\n                        .setMaxResults(1))\n                .setView("workflowInstanceTask-browse"));\n    if (!CollectionUtils.isEmpty(list)) {\n        return list.get(0);\n    }\n    return null;\n}\n\nprivate static void commitIfNeed(Table<Document> queriesTable) {\n    if (queriesTable.getDatasource().isModified()) {\n        queriesTable.getDatasource().commit();\n    }\n}\n\n	\r\nimport com.groupstp.cifra.entity.*;\r\nimport com.groupstp.workflowstp.entity.*;\r\nimport com.haulmont.cuba.gui.components.*;\r\nimport com.haulmont.cuba.core.global.*;\r\nimport org.apache.commons.collections4.*;\r\nimport com.haulmont.cuba.gui.icons.*;\r\nimport com.haulmont.cuba.gui.xml.layout.*;\r\nimport com.haulmont.cuba.gui.components.actions.*;\r\nimport com.groupstp.workflowstp.service.WorkflowService;\r\nimport java.util.*;\r\n\r\ndoc = entity;\r\ntask = workflowInstanceTask;\r\neditor = screen;\r\ninstance = workflowInstance;\r\n\r\nmessages = AppBeans.get(Messages.NAME);\r\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\r\n\r\ninitFields();\r\ninitActions();\r\n\r\n\r\nprivate void initFields() {\r\n    List<String> editableProperties = Collections.emptyList();\r\n    \r\n    FieldGroup fieldGroup = (FieldGroup) editor.getComponentNN("fieldGroup");\r\n    for (String property : editableProperties) {\r\n        fieldGroup.getFieldNN(property).setEditable(Boolean.TRUE);\r\n    }\r\n}\r\n\r\nprivate void initActions() {\r\n    BoxLayout box = (BoxLayout) editor.getComponentNN("bottomPanel");\r\n    box.remove(box.getComponentNN("windowCommit"));\r\n    \r\n    box.add(initReceiveAction(doc, task, editor), 0);\r\n}\r\n\r\nprivate Button initReceiveAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("receive") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "Получить";\r\n        }\r\n\r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.CHECK.source();\r\n        }\r\n\r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_received":"true"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate static void commit(AbstractEditor editor) {\r\n    if (editor.isModified()) {\r\n        editor.commitAndClose();\r\n    }\r\n}\r\n
cd5586ef-17e8-0bee-0c2e-b5575274b39b	5	2018-08-24 15:59:01.582	admin	2018-08-24 17:08:19.943	admin	\N	\N	Выдано	cifra$Document	1	\N	import com.groupstp.cifra.entity.*;\nimport com.groupstp.workflowstp.entity.*;\nimport com.haulmont.cuba.gui.components.*;\nimport com.haulmont.cuba.core.global.*;\nimport org.apache.commons.collections4.*;\nimport com.haulmont.cuba.gui.icons.*;\nimport com.haulmont.cuba.gui.xml.layout.*;\nimport com.groupstp.workflowstp.service.WorkflowService;\nimport com.haulmont.cuba.gui.components.actions.*;\nimport com.haulmont.chile.core.model.*;\nimport com.groupstp.workflowstp.dto.*;\nimport java.util.*;\n\nstage = stage;\nworkflow = workflow;\nframe = screen;\n\nmessages = AppBeans.get(Messages.NAME);\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\n\n\nqueriesTable = (Table) frame.getComponentNN("queriesTable");\n\ninitColumns();\ninitActions();\n\n\nprivate void initColumns() {\n    List<String> columnsProperties = Arrays.asList(\n        "company","division","docType","date","contragent",\n        "description","number","dateLoad","problems","fixDue",\n        "warehouse","cell","externalLink","externalId"\n        );\n                \n    List<String> editableProperties = Collections.emptyList();\n    \n    clearAllColumns();\n    showPropertiesColumns(columnsProperties);\n    markAsEditable(editableProperties);\n}\n\nprivate void clearAllColumns() {\n    List<Table.Column> columns = queriesTable.getColumns();\n    if (!CollectionUtils.isEmpty(columns)) {\n        columns = new ArrayList<>(columns);\n        for (Table.Column column : columns) {\n            queriesTable.removeColumn(column);\n        }\n    }\n}\n\nprivate void showPropertiesColumns(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            MetaPropertyPath path = queriesTable.getDatasource().getMetaClass().getPropertyPath(property);\n            Table.Column column = new Table.Column(path, property);\n            column.setType(path.getRangeJavaClass());\n            column.setCaption(messages.getMessage(Document.class, "Document." + property));\n            queriesTable.addColumn(column);\n        }\n    }\n}\n\nprivate void markAsEditable(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            queriesTable.getColumn(property).setEditable(true);\n        }\n    }\n    queriesTable.setEditable(true);\n}\n\nprivate void initActions() {\n    ButtonsPanel buttonsPanel = queriesTable.getButtonsPanel();\n    \n    initReturnAction(queriesTable, buttonsPanel, workflow, stage, frame);\n}\n\nprivate void initReturnAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("return") {\n        @Override\n        public String getCaption() {\n            return "Вернуть";\n        }\n\n        @Override\n        public String getIcon() {\n            return CubaIcon.REPLY.source();\n        }\n\n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_returned":"true", "doc_issued":"false"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n\n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 0);\n    queriesTable.addAction(action);\n}\n\nprivate static WorkflowInstanceTask loadTasks(final Document doc, final Workflow workflow, final Stage stage) {\n    List<WorkflowInstanceTask> list = AppBeans.get(DataManager.NAME).loadList(LoadContext.create(WorkflowInstanceTask.class)\n                .setQuery(new LoadContext.Query("select e from wfstp\\$" + "WorkflowInstanceTask e " +\n                    "join e.instance i " +\n                    "join e.step s " +\n                    "where i.workflow.id = :workflowId and i.entityId = :entityId and s.stage.id = :stageId and s.workflow.id = :workflowId " +\n                    "and e.endDate is null order by e.createTs desc")\n                        .setParameter("workflowId", workflow.getId())\n                        .setParameter("entityId", doc.getId().toString())\n                        .setParameter("stageId", stage.getId())\n                        .setMaxResults(1))\n                .setView("workflowInstanceTask-browse"));\n    if (!CollectionUtils.isEmpty(list)) {\n        return list.get(0);\n    }\n    return null;\n}\n\nprivate static void commitIfNeed(Table<Document> queriesTable) {\n    if (queriesTable.getDatasource().isModified()) {\n        queriesTable.getDatasource().commit();\n    }\n}\n\n	\r\nimport com.groupstp.cifra.entity.*;\r\nimport com.groupstp.workflowstp.entity.*;\r\nimport com.haulmont.cuba.gui.components.*;\r\nimport com.haulmont.cuba.core.global.*;\r\nimport org.apache.commons.collections4.*;\r\nimport com.haulmont.cuba.gui.icons.*;\r\nimport com.haulmont.cuba.gui.xml.layout.*;\r\nimport com.haulmont.cuba.gui.components.actions.*;\r\nimport com.groupstp.workflowstp.service.WorkflowService;\r\nimport java.util.*;\r\n\r\ndoc = entity;\r\ntask = workflowInstanceTask;\r\neditor = screen;\r\ninstance = workflowInstance;\r\n\r\nmessages = AppBeans.get(Messages.NAME);\r\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\r\n\r\ninitFields();\r\ninitActions();\r\n\r\n\r\nprivate void initFields() {\r\n    List<String> editableProperties = Collections.emptyList();\r\n    \r\n    FieldGroup fieldGroup = (FieldGroup) editor.getComponentNN("fieldGroup");\r\n    for (String property : editableProperties) {\r\n        fieldGroup.getFieldNN(property).setEditable(Boolean.TRUE);\r\n    }\r\n}\r\n\r\nprivate void initActions() {\r\n    BoxLayout box = (BoxLayout) editor.getComponentNN("bottomPanel");\r\n    box.remove(box.getComponentNN("windowCommit"));\r\n    \r\n    box.add(initReturnAction(doc, task, editor), 0);\r\n}\r\n\r\nprivate Button initReturnAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("return") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "Вернуть";\r\n        }\r\n\r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.REPLY.source();\r\n        }\r\n\r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_returned":"true","doc_issued":"false"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate static void commit(AbstractEditor editor) {\r\n    if (editor.isModified()) {\r\n        editor.commitAndClose();\r\n    }\r\n}\r\n
fe1970bd-a3e6-c553-50f2-f38d85e85f1f	5	2018-08-24 15:58:49.262	admin	2018-08-24 17:06:54.878	admin	\N	\N	Обработано	cifra$Document	1	\N	import com.groupstp.cifra.entity.*;\nimport com.groupstp.workflowstp.entity.*;\nimport com.haulmont.cuba.gui.components.*;\nimport com.haulmont.cuba.core.global.*;\nimport org.apache.commons.collections4.*;\nimport com.haulmont.cuba.gui.icons.*;\nimport com.haulmont.cuba.gui.xml.layout.*;\nimport com.groupstp.workflowstp.service.WorkflowService;\nimport com.haulmont.cuba.gui.components.actions.*;\nimport com.haulmont.chile.core.model.*;\nimport com.groupstp.workflowstp.dto.*;\nimport java.util.*;\n\nstage = stage;\nworkflow = workflow;\nframe = screen;\n\nmessages = AppBeans.get(Messages.NAME);\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\n\n\nqueriesTable = (Table) frame.getComponentNN("queriesTable");\n\ninitColumns();\ninitActions();\n\n\nprivate void initColumns() {\n    List<String> columnsProperties = Arrays.asList(\n        "company","division","docType","date","contragent",\n        "description","number","dateLoad","problems","fixDue",\n        "warehouse","cell","externalLink","externalId"\n        );\n                \n    List<String> editableProperties = Collections.emptyList();\n    \n    clearAllColumns();\n    showPropertiesColumns(columnsProperties);\n    markAsEditable(editableProperties);\n}\n\nprivate void clearAllColumns() {\n    List<Table.Column> columns = queriesTable.getColumns();\n    if (!CollectionUtils.isEmpty(columns)) {\n        columns = new ArrayList<>(columns);\n        for (Table.Column column : columns) {\n            queriesTable.removeColumn(column);\n        }\n    }\n}\n\nprivate void showPropertiesColumns(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            MetaPropertyPath path = queriesTable.getDatasource().getMetaClass().getPropertyPath(property);\n            Table.Column column = new Table.Column(path, property);\n            column.setType(path.getRangeJavaClass());\n            column.setCaption(messages.getMessage(Document.class, "Document." + property));\n            queriesTable.addColumn(column);\n        }\n    }\n}\n\nprivate void markAsEditable(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            queriesTable.getColumn(property).setEditable(true);\n        }\n    }\n    queriesTable.setEditable(true);\n}\n\nprivate void initActions() {\n    ButtonsPanel buttonsPanel = queriesTable.getButtonsPanel();\n    \n    initIssueAction(queriesTable, buttonsPanel, workflow, stage, frame);\n    initEliminateAction(queriesTable, buttonsPanel, workflow, stage, frame);\n}\n\nprivate void initIssueAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("issue") {\n        @Override\n        public String getCaption() {\n            return "Выдать";\n        }\n\n        @Override\n        public String getIcon() {\n            return CubaIcon.FORWARD.source();\n        }\n\n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_issued":"true"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n\n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 0);\n    queriesTable.addAction(action);\n}\n\nprivate void initEliminateAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("eliminate") {\n        @Override\n        public String getCaption() {\n            return "Уничтожить";\n        }\n\n        @Override\n        public String getIcon() {\n            return CubaIcon.REMOVE.source();\n        }\n\n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_eliminated":"true"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n\n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 1);\n    queriesTable.addAction(action);\n}\n\nprivate static WorkflowInstanceTask loadTasks(final Document doc, final Workflow workflow, final Stage stage) {\n    List<WorkflowInstanceTask> list = AppBeans.get(DataManager.NAME).loadList(LoadContext.create(WorkflowInstanceTask.class)\n                .setQuery(new LoadContext.Query("select e from wfstp\\$" + "WorkflowInstanceTask e " +\n                    "join e.instance i " +\n                    "join e.step s " +\n                    "where i.workflow.id = :workflowId and i.entityId = :entityId and s.stage.id = :stageId and s.workflow.id = :workflowId " +\n                    "and e.endDate is null order by e.createTs desc")\n                        .setParameter("workflowId", workflow.getId())\n                        .setParameter("entityId", doc.getId().toString())\n                        .setParameter("stageId", stage.getId())\n                        .setMaxResults(1))\n                .setView("workflowInstanceTask-browse"));\n    if (!CollectionUtils.isEmpty(list)) {\n        return list.get(0);\n    }\n    return null;\n}\n\nprivate static void commitIfNeed(Table<Document> queriesTable) {\n    if (queriesTable.getDatasource().isModified()) {\n        queriesTable.getDatasource().commit();\n    }\n}\n\n	\r\nimport com.groupstp.cifra.entity.*;\r\nimport com.groupstp.workflowstp.entity.*;\r\nimport com.haulmont.cuba.gui.components.*;\r\nimport com.haulmont.cuba.core.global.*;\r\nimport org.apache.commons.collections4.*;\r\nimport com.haulmont.cuba.gui.icons.*;\r\nimport com.haulmont.cuba.gui.xml.layout.*;\r\nimport com.haulmont.cuba.gui.components.actions.*;\r\nimport com.groupstp.workflowstp.service.WorkflowService;\r\nimport java.util.*;\r\n\r\ndoc = entity;\r\ntask = workflowInstanceTask;\r\neditor = screen;\r\ninstance = workflowInstance;\r\n\r\nmessages = AppBeans.get(Messages.NAME);\r\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\r\n\r\ninitFields();\r\ninitActions();\r\n\r\n\r\nprivate void initFields() {\r\n    List<String> editableProperties = Collections.emptyList();\r\n    \r\n    FieldGroup fieldGroup = (FieldGroup) editor.getComponentNN("fieldGroup");\r\n    for (String property : editableProperties) {\r\n        fieldGroup.getFieldNN(property).setEditable(Boolean.TRUE);\r\n    }\r\n}\r\n\r\nprivate void initActions() {\r\n    BoxLayout box = (BoxLayout) editor.getComponentNN("bottomPanel");\r\n    box.remove(box.getComponentNN("windowCommit"));\r\n    \r\n    box.add(initIssueAction(doc, task, editor), 0);\r\n    box.add(initEliminateAction(doc, task, editor), 1);\r\n}\r\n\r\nprivate Button initIssueAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("issue") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "Выдать";\r\n        }\r\n\r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.FORWARD.source();\r\n        }\r\n\r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_issued":"true"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate Button initIssueAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("eliminate") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "Уничтожить";\r\n        }\r\n\r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.REMOVE.source();\r\n        }\r\n\r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_eliminated":"true"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate static void commit(AbstractEditor editor) {\r\n    if (editor.isModified()) {\r\n        editor.commitAndClose();\r\n    }\r\n}\r\n
e025c436-c147-2d40-96f2-134768cfcf9b	28	2018-08-23 13:28:23.564	admin	2018-08-24 16:02:49.6	admin	\N	\N	Исходящий	cifra$Document	1	\N	import com.groupstp.cifra.entity.*;\nimport com.groupstp.workflowstp.entity.*;\nimport com.haulmont.cuba.gui.components.*;\nimport com.haulmont.cuba.core.global.*;\nimport org.apache.commons.collections4.*;\nimport com.haulmont.cuba.gui.icons.*;\nimport com.haulmont.cuba.gui.xml.layout.*;\nimport com.groupstp.workflowstp.service.WorkflowService;\nimport com.haulmont.cuba.gui.components.actions.*;\nimport com.haulmont.chile.core.model.*;\nimport com.groupstp.workflowstp.dto.*;\nimport java.util.*;\n\nstage = stage;\nworkflow = workflow;\nframe = screen;\n\nmessages = AppBeans.get(Messages.NAME);\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\n\n\nqueriesTable = (Table) frame.getComponentNN("queriesTable");\n\ninitColumns();\ninitActions();\n\n\nprivate void initColumns() {\n    List<String> columnsProperties = Arrays.asList(\n        "company","division","docType","date","contragent",\n        "description","number","dateLoad","problems","fixDue",\n        "warehouse","cell","externalLink","externalId"\n        );\n                \n    List<String> editableProperties = Collections.emptyList();\n    \n    clearAllColumns();\n    showPropertiesColumns(columnsProperties);\n    markAsEditable(editableProperties);\n}\n\nprivate void clearAllColumns() {\n    List<Table.Column> columns = queriesTable.getColumns();\n    if (!CollectionUtils.isEmpty(columns)) {\n        columns = new ArrayList<>(columns);\n        for (Table.Column column : columns) {\n            queriesTable.removeColumn(column);\n        }\n    }\n}\n\nprivate void showPropertiesColumns(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            MetaPropertyPath path = queriesTable.getDatasource().getMetaClass().getPropertyPath(property);\n            Table.Column column = new Table.Column(path, property);\n            column.setType(path.getRangeJavaClass());\n            column.setCaption(messages.getMessage(Document.class, "Document." + property));\n            queriesTable.addColumn(column);\n        }\n    }\n}\n\nprivate void markAsEditable(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            queriesTable.getColumn(property).setEditable(true);\n        }\n    }\n    queriesTable.setEditable(true);\n}\n\nprivate void initActions() {\n    ButtonsPanel buttonsPanel = queriesTable.getButtonsPanel();\n    \n    initToWorkAction(queriesTable, buttonsPanel, workflow, stage, frame);\n    initSentAction(queriesTable, buttonsPanel, workflow, stage, frame);\n}\n\nprivate void initToWorkAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("towork") {\n        @Override\n        public String getCaption() {\n            return "В работу";\n        }\n\n        @Override\n        public String getIcon() {\n            return CubaIcon.PENCIL.source();\n        }\n\n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_to_work":"true"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n\n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 0);\n    queriesTable.addAction(action);\n}\n\nprivate void initSentAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("sent") {\n        @Override\n        public String getCaption() {\n            return "Отправить";\n        }\n        \n        @Override\n        public String getIcon() {\n            return CubaIcon.SIGN_OUT.source();\n        }\n        \n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_send":"true"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n        \n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 1);\n    queriesTable.addAction(action);\n}\n\nprivate static WorkflowInstanceTask loadTasks(final Document doc, final Workflow workflow, final Stage stage) {\n    List<WorkflowInstanceTask> list = AppBeans.get(DataManager.NAME).loadList(LoadContext.create(WorkflowInstanceTask.class)\n                .setQuery(new LoadContext.Query("select e from wfstp\\$" + "WorkflowInstanceTask e " +\n                    "join e.instance i " +\n                    "join e.step s " +\n                    "where i.workflow.id = :workflowId and i.entityId = :entityId and s.stage.id = :stageId and s.workflow.id = :workflowId " +\n                    "and e.endDate is null order by e.createTs desc")\n                        .setParameter("workflowId", workflow.getId())\n                        .setParameter("entityId", doc.getId().toString())\n                        .setParameter("stageId", stage.getId())\n                        .setMaxResults(1))\n                .setView("workflowInstanceTask-browse"));\n    if (!CollectionUtils.isEmpty(list)) {\n        return list.get(0);\n    }\n    return null;\n}\n\nprivate static void commitIfNeed(Table<Document> queriesTable) {\n    if (queriesTable.getDatasource().isModified()) {\n        queriesTable.getDatasource().commit();\n    }\n}\n\n	\r\nimport com.groupstp.cifra.entity.*;\r\nimport com.groupstp.workflowstp.entity.*;\r\nimport com.haulmont.cuba.gui.components.*;\r\nimport com.haulmont.cuba.core.global.*;\r\nimport org.apache.commons.collections4.*;\r\nimport com.haulmont.cuba.gui.icons.*;\r\nimport com.haulmont.cuba.gui.xml.layout.*;\r\nimport com.haulmont.cuba.gui.components.actions.*;\r\nimport com.groupstp.workflowstp.service.WorkflowService;\r\nimport java.util.*;\r\n\r\ndoc = entity;\r\ntask = workflowInstanceTask;\r\neditor = screen;\r\ninstance = workflowInstance;\r\n\r\nmessages = AppBeans.get(Messages.NAME);\r\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\r\n\r\ninitFields();\r\ninitActions();\r\n\r\n\r\nprivate void initFields() {\r\n    List<String> editableProperties = Collections.emptyList();\r\n    \r\n    FieldGroup fieldGroup = (FieldGroup) editor.getComponentNN("fieldGroup");\r\n    for (String property : editableProperties) {\r\n        fieldGroup.getFieldNN(property).setEditable(Boolean.TRUE);\r\n    }\r\n}\r\n\r\nprivate void initActions() {\r\n    BoxLayout box = (BoxLayout) editor.getComponentNN("bottomPanel");\r\n    box.remove(box.getComponentNN("windowCommit"));\r\n    \r\n    box.add(initToWorkAction(doc, task, editor), 0);\r\n    box.add(initSentAction(doc, task, editor), 1);\r\n}\r\n\r\nprivate Button initToWorkAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("towork") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "В работу";\r\n        }\r\n\r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.PENCIL.source();\r\n        }\r\n\r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_to_work":"true"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate Button initSentAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("sent") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "Отправить";\r\n        }\r\n        \r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.SIGN_OUT.source();\r\n        }\r\n        \r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_send":"true"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate static void commit(AbstractEditor editor) {\r\n    if (editor.isModified()) {\r\n        editor.commitAndClose();\r\n    }\r\n}\r\n
0d6b103d-91b6-fa30-f7e0-33d0556863dc	3	2018-08-24 15:58:31.594	admin	2018-08-24 16:07:28.128	admin	\N	\N	Проблема	cifra$Document	1	\N	import com.groupstp.cifra.entity.*;\nimport com.groupstp.workflowstp.entity.*;\nimport com.haulmont.cuba.gui.components.*;\nimport com.haulmont.cuba.core.global.*;\nimport org.apache.commons.collections4.*;\nimport com.haulmont.cuba.gui.icons.*;\nimport com.haulmont.cuba.gui.xml.layout.*;\nimport com.groupstp.workflowstp.service.WorkflowService;\nimport com.haulmont.cuba.gui.components.actions.*;\nimport com.haulmont.chile.core.model.*;\nimport com.groupstp.workflowstp.dto.*;\nimport java.util.*;\n\nstage = stage;\nworkflow = workflow;\nframe = screen;\n\nmessages = AppBeans.get(Messages.NAME);\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\n\n\nqueriesTable = (Table) frame.getComponentNN("queriesTable");\n\ninitColumns();\ninitActions();\n\n\nprivate void initColumns() {\n    List<String> columnsProperties = Arrays.asList(\n        "company","division","docType","date","contragent",\n        "description","number","dateLoad","problems","fixDue",\n        "warehouse","cell","externalLink","externalId"\n        );\n                \n    List<String> editableProperties = Collections.emptyList();\n    \n    clearAllColumns();\n    showPropertiesColumns(columnsProperties);\n    markAsEditable(editableProperties);\n}\n\nprivate void clearAllColumns() {\n    List<Table.Column> columns = queriesTable.getColumns();\n    if (!CollectionUtils.isEmpty(columns)) {\n        columns = new ArrayList<>(columns);\n        for (Table.Column column : columns) {\n            queriesTable.removeColumn(column);\n        }\n    }\n}\n\nprivate void showPropertiesColumns(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            MetaPropertyPath path = queriesTable.getDatasource().getMetaClass().getPropertyPath(property);\n            Table.Column column = new Table.Column(path, property);\n            column.setType(path.getRangeJavaClass());\n            column.setCaption(messages.getMessage(Document.class, "Document." + property));\n            queriesTable.addColumn(column);\n        }\n    }\n}\n\nprivate void markAsEditable(List<String> properties) {\n    if (!CollectionUtils.isEmpty(properties)) {\n        for (String property : properties) {\n            queriesTable.getColumn(property).setEditable(true);\n        }\n    }\n    queriesTable.setEditable(true);\n}\n\nprivate void initActions() {\n    ButtonsPanel buttonsPanel = queriesTable.getButtonsPanel();\n    \n    initProcessAction(queriesTable, buttonsPanel, workflow, stage, frame);\n}\n\nprivate void initProcessAction(final Table<Document> queriesTable, final ButtonsPanel buttonsPanel,\n                               final Workflow workflow, final Stage stage, final Frame frame) {\n    Action action = new BaseAction("process") {\n        @Override\n        public String getCaption() {\n            return "Обработать";\n        }\n\n        @Override\n        public String getIcon() {\n            return CubaIcon.FORWARD.source();\n        }\n\n        @Override\n        public void actionPerform(Component component) {\n            Set<Document> selected = queriesTable.getSelected();\n            if (!CollectionUtils.isEmpty(selected)) {\n                \n                commitIfNeed(queriesTable);\n                \n                WorkflowService service = AppBeans.get(WorkflowService.NAME);\n                try {\n                    for (Document doc : selected) {\n                        try {\n                            WorkflowInstanceTask task = loadTasks(doc, workflow, stage);\n                            if (task != null) {\n                                service.finishTask(task, ["doc_processed":"true"]);\n                            }\n                        } catch (Exception e) {\n                            throw new RuntimeException("Ошибка обработки заявки", e);\n                        }\n                    }\n                } finally {\n                    queriesTable.getDatasource().refresh();\n                }\n            }\n        }\n\n        @Override\n        public boolean isPermitted() {\n            if (super.isPermitted()) {\n                return !CollectionUtils.isEmpty(queriesTable.getSelected());\n            }\n            return false;\n        }\n    };\n    \n    Button button = componentsFactory.createComponent(Button.class);\n    button.setAction(action);\n    buttonsPanel.add(button, 0);\n    queriesTable.addAction(action);\n}\n\nprivate static WorkflowInstanceTask loadTasks(final Document doc, final Workflow workflow, final Stage stage) {\n    List<WorkflowInstanceTask> list = AppBeans.get(DataManager.NAME).loadList(LoadContext.create(WorkflowInstanceTask.class)\n                .setQuery(new LoadContext.Query("select e from wfstp\\$" + "WorkflowInstanceTask e " +\n                    "join e.instance i " +\n                    "join e.step s " +\n                    "where i.workflow.id = :workflowId and i.entityId = :entityId and s.stage.id = :stageId and s.workflow.id = :workflowId " +\n                    "and e.endDate is null order by e.createTs desc")\n                        .setParameter("workflowId", workflow.getId())\n                        .setParameter("entityId", doc.getId().toString())\n                        .setParameter("stageId", stage.getId())\n                        .setMaxResults(1))\n                .setView("workflowInstanceTask-browse"));\n    if (!CollectionUtils.isEmpty(list)) {\n        return list.get(0);\n    }\n    return null;\n}\n\nprivate static void commitIfNeed(Table<Document> queriesTable) {\n    if (queriesTable.getDatasource().isModified()) {\n        queriesTable.getDatasource().commit();\n    }\n}\n\n	\r\nimport com.groupstp.cifra.entity.*;\r\nimport com.groupstp.workflowstp.entity.*;\r\nimport com.haulmont.cuba.gui.components.*;\r\nimport com.haulmont.cuba.core.global.*;\r\nimport org.apache.commons.collections4.*;\r\nimport com.haulmont.cuba.gui.icons.*;\r\nimport com.haulmont.cuba.gui.xml.layout.*;\r\nimport com.haulmont.cuba.gui.components.actions.*;\r\nimport com.groupstp.workflowstp.service.WorkflowService;\r\nimport java.util.*;\r\n\r\ndoc = entity;\r\ntask = workflowInstanceTask;\r\neditor = screen;\r\ninstance = workflowInstance;\r\n\r\nmessages = AppBeans.get(Messages.NAME);\r\ncomponentsFactory = AppBeans.get(ComponentsFactory.NAME);\r\n\r\ninitFields();\r\ninitActions();\r\n\r\n\r\nprivate void initFields() {\r\n    List<String> editableProperties = Collections.emptyList();\r\n    \r\n    FieldGroup fieldGroup = (FieldGroup) editor.getComponentNN("fieldGroup");\r\n    for (String property : editableProperties) {\r\n        fieldGroup.getFieldNN(property).setEditable(Boolean.TRUE);\r\n    }\r\n}\r\n\r\nprivate void initActions() {\r\n    BoxLayout box = (BoxLayout) editor.getComponentNN("bottomPanel");\r\n    box.remove(box.getComponentNN("windowCommit"));\r\n    \r\n    box.add(initProcessAction(doc, task, editor), 0);\r\n}\r\n\r\nprivate Button initProcessAction(final Document doc, final WorkflowInstanceTask task, final AbstractEditor editor) {\r\n    Action action = new BaseAction("process") {\r\n        @Override\r\n        public String getCaption() {\r\n            return "Обработать";\r\n        }\r\n\r\n        @Override\r\n        public String getIcon() {\r\n            return CubaIcon.FORWARD.source();\r\n        }\r\n\r\n        @Override\r\n        public void actionPerform(Component component) {\r\n            try {\r\n                commit(editor);\r\n                AppBeans.get(WorkflowService.NAME).finishTask(task, ["doc_processed":"true"]);\r\n                editor.close(editor.COMMIT_ACTION_ID, true);\r\n            } catch (Exception e) {\r\n                throw new RuntimeException("Ошибка обработки заявки", e);\r\n            }\r\n        }\r\n    };\r\n    \r\n    Button button = componentsFactory.createComponent(Button.class);\r\n    button.setAction(action);\r\n    return button;\r\n}\r\n\r\nprivate static void commit(AbstractEditor editor) {\r\n    if (editor.isModified()) {\r\n        editor.commitAndClose();\r\n    }\r\n}\r\n
db433b8a-6495-5e65-6211-cab2f9a8f87f	2	2018-08-24 16:48:44.047	admin	2018-08-24 16:49:04.194	admin	\N	\N	Уничтожен	cifra$Document	2	true 	\N	\N
\.


--
-- Data for Name: wfstp_step; Type: TABLE DATA; Schema: public; Owner: cuba
--

COPY wfstp_step (id, version, create_ts, created_by, update_ts, updated_by, delete_ts, deleted_by, order_, stage_id, workflow_id) FROM stdin;
f385bed1-c2b1-3b77-4b93-bce29b6dda32	4	2018-08-23 13:30:25.507	admin	2018-08-23 15:34:10.492	admin	\N	\N	4	9bc50a3a-e0d4-d548-b032-2ec89a13d37d	d59aab88-accf-a92e-0d7f-ed02d9e7b677
05c424cd-34f1-8dd0-b0bf-2581eb825bd9	3	2018-08-23 13:30:25.509	admin	2018-08-23 15:34:10.493	admin	\N	\N	5	895cde91-a6e7-5004-47f5-bb45bf349324	d59aab88-accf-a92e-0d7f-ed02d9e7b677
721e60c0-749d-7e04-3926-c2d388d50a3a	3	2018-08-23 13:30:25.509	admin	2018-08-23 15:34:10.493	admin	\N	\N	2	e025c436-c147-2d40-96f2-134768cfcf9b	d59aab88-accf-a92e-0d7f-ed02d9e7b677
909c5f64-af21-63c0-399a-ad50f3e0a44f	1	2018-08-23 15:34:10.449	admin	2018-08-23 15:34:10.449	\N	\N	\N	3	0eb1036e-aac4-3004-d496-7aaf33643a8c	d59aab88-accf-a92e-0d7f-ed02d9e7b677
b7f59dde-9650-c0dc-2316-5eed6e3af6c2	4	2018-08-23 15:30:39.354	admin	2018-08-23 17:38:05.247	admin	\N	\N	1	4a827eb3-e652-fb59-aa84-5e648b18d45c	d59aab88-accf-a92e-0d7f-ed02d9e7b677
93e82816-f44d-f8ca-b5ea-5b49ed73f663	2	2018-08-23 17:33:02.359	admin	2018-08-24 16:16:24.425	admin	\N	\N	6	a5ed34af-bc1c-c7ea-1d1b-ca4bc1cb5731	d59aab88-accf-a92e-0d7f-ed02d9e7b677
643443d1-c423-f9b5-5038-7807a4d1b0bf	1	2018-08-24 16:16:24.384	admin	2018-08-24 16:16:24.384	\N	\N	\N	7	0d6b103d-91b6-fa30-f7e0-33d0556863dc	d59aab88-accf-a92e-0d7f-ed02d9e7b677
85949fa8-2f3e-46c7-07dc-38e7f3c1586c	2	2018-08-24 16:16:24.384	admin	2018-08-24 16:50:56.693	admin	\N	\N	8	fe1970bd-a3e6-c553-50f2-f38d85e85f1f	d59aab88-accf-a92e-0d7f-ed02d9e7b677
70e7b7e9-f9fe-d929-0ce1-9eca868e2bd9	2	2018-08-24 16:16:24.384	admin	2018-08-24 16:50:56.693	admin	\N	\N	9	cd5586ef-17e8-0bee-0c2e-b5575274b39b	d59aab88-accf-a92e-0d7f-ed02d9e7b677
d8e6ba04-f5f7-2118-48d4-6319f34f67ec	1	2018-08-24 16:50:56.665	admin	2018-08-24 16:50:56.665	\N	\N	\N	10	db433b8a-6495-5e65-6211-cab2f9a8f87f	d59aab88-accf-a92e-0d7f-ed02d9e7b677
\.


--
-- Data for Name: wfstp_step_direction; Type: TABLE DATA; Schema: public; Owner: cuba
--

COPY wfstp_step_direction (id, version, create_ts, created_by, update_ts, updated_by, delete_ts, deleted_by, order_, from_id, to_id, condition_sql_script, condition_xml, condition_groovy_script) FROM stdin;
d26317e9-5c92-327b-0ae7-6684fbb72d68	3	2018-08-23 13:30:25.513	admin	2018-08-23 15:34:10.493	admin	\N	\N	1	f385bed1-c2b1-3b77-4b93-bce29b6dda32	05c424cd-34f1-8dd0-b0bf-2581eb825bd9	\N	\N	"true".equalsIgnoreCase(context["doc_received"])
1c04c3da-0344-cefa-798b-2c19e31792b0	2	2018-08-23 13:30:25.511	admin	2018-08-23 15:34:10.493	admin	\N	\N	1	721e60c0-749d-7e04-3926-c2d388d50a3a	909c5f64-af21-63c0-399a-ad50f3e0a44f	\N	\N	"true".equalsIgnoreCase(context["doc_to_work"])
3e494d4b-e7a9-c8ca-c966-1d6bd24fc060	1	2018-08-23 15:34:10.449	admin	2018-08-23 15:34:10.449	\N	\N	\N	2	721e60c0-749d-7e04-3926-c2d388d50a3a	f385bed1-c2b1-3b77-4b93-bce29b6dda32	\N	\N	"true".equalsIgnoreCase(context["doc_send"])
621ff1bf-c973-0f57-ca4e-61f4ca5b8033	1	2018-08-23 15:34:10.45	admin	2018-08-23 15:34:10.45	\N	\N	\N	1	909c5f64-af21-63c0-399a-ad50f3e0a44f	f385bed1-c2b1-3b77-4b93-bce29b6dda32	\N	\N	"true".equalsIgnoreCase(context["doc_send"])
aa7ecaa1-7a08-636b-8586-a5fc9db12506	1	2018-08-23 15:46:10.66	admin	2018-08-23 15:46:10.66	\N	\N	\N	1	b7f59dde-9650-c0dc-2316-5eed6e3af6c2	721e60c0-749d-7e04-3926-c2d388d50a3a	\N	\N	"true".equalsIgnoreCase(context["doc_flow_outgoing"])
cd31b980-5440-4c8c-e006-7fc667fa9390	2	2018-08-23 17:33:02.36	admin	2018-08-23 17:38:05.247	admin	\N	\N	2	b7f59dde-9650-c0dc-2316-5eed6e3af6c2	93e82816-f44d-f8ca-b5ea-5b49ed73f663	\N	\N	"true".equalsIgnoreCase(context["doc_flow_incoming"])
8eb91bf9-4568-e9c0-ed39-0de3c66f1e36	1	2018-08-24 16:16:24.385	admin	2018-08-24 16:16:24.385	\N	\N	\N	1	85949fa8-2f3e-46c7-07dc-38e7f3c1586c	70e7b7e9-f9fe-d929-0ce1-9eca868e2bd9	\N	\N	"true".equalsIgnoreCase(context["doc_issued"])
12c8a273-8806-e58e-e4ee-2b8502cd6d3b	1	2018-08-24 16:16:24.386	admin	2018-08-24 16:16:24.386	\N	\N	\N	1	643443d1-c423-f9b5-5038-7807a4d1b0bf	85949fa8-2f3e-46c7-07dc-38e7f3c1586c	\N	\N	"true".equalsIgnoreCase(context["doc_processed"])
f873e6a3-4866-cb40-490f-2f583c99b665	1	2018-08-24 16:16:24.385	admin	2018-08-24 16:16:24.385	\N	\N	\N	1	93e82816-f44d-f8ca-b5ea-5b49ed73f663	643443d1-c423-f9b5-5038-7807a4d1b0bf	\N	\N	"true".equalsIgnoreCase(context["doc_problem"])
0114da08-275a-163b-6b82-ff916517c7c1	1	2018-08-24 16:16:24.385	admin	2018-08-24 16:16:24.385	\N	\N	\N	2	93e82816-f44d-f8ca-b5ea-5b49ed73f663	85949fa8-2f3e-46c7-07dc-38e7f3c1586c	\N	\N	"true".equalsIgnoreCase(context["doc_processed"])
0c714634-ff15-658e-2a05-b3b3cf8a5285	1	2018-08-24 16:50:56.665	admin	2018-08-24 16:50:56.665	\N	\N	\N	2	85949fa8-2f3e-46c7-07dc-38e7f3c1586c	d8e6ba04-f5f7-2118-48d4-6319f34f67ec	\N	\N	"true".equalsIgnoreCase(context["doc_eliminated"])
1500afbb-cdec-0bb3-4c52-3f722ea7d2b0	1	2018-08-24 16:50:56.665	admin	2018-08-24 16:50:56.665	\N	\N	\N	1	70e7b7e9-f9fe-d929-0ce1-9eca868e2bd9	85949fa8-2f3e-46c7-07dc-38e7f3c1586c	\N	\N	"true".equalsIgnoreCase(context["doc_returned"])
\.


--
-- Data for Name: wfstp_workflow; Type: TABLE DATA; Schema: public; Owner: cuba
--

COPY wfstp_workflow (id, version, create_ts, created_by, update_ts, updated_by, delete_ts, deleted_by, name, active, entity_name) FROM stdin;
d59aab88-accf-a92e-0d7f-ed02d9e7b677	32	2018-08-23 13:30:25.513	admin	2018-08-24 17:04:09.476	admin	\N	\N	Входящие/исходящие документы	t	cifra$Document
\.


--
-- Name: stage_actors_link stage_actors_link_pkey; Type: CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY stage_actors_link
    ADD CONSTRAINT stage_actors_link_pkey PRIMARY KEY (stage_id, actor_id);


--
-- Name: wfstp_stage wfstp_stage_pkey; Type: CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY wfstp_stage
    ADD CONSTRAINT wfstp_stage_pkey PRIMARY KEY (id);


--
-- Name: wfstp_step_direction wfstp_step_direction_pkey; Type: CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY wfstp_step_direction
    ADD CONSTRAINT wfstp_step_direction_pkey PRIMARY KEY (id);


--
-- Name: wfstp_step wfstp_step_pkey; Type: CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY wfstp_step
    ADD CONSTRAINT wfstp_step_pkey PRIMARY KEY (id);


--
-- Name: wfstp_workflow wfstp_workflow_pkey; Type: CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY wfstp_workflow
    ADD CONSTRAINT wfstp_workflow_pkey PRIMARY KEY (id);


--
-- Name: idx_wfstp_step_direction_on_from; Type: INDEX; Schema: public; Owner: cuba
--

CREATE INDEX idx_wfstp_step_direction_on_from ON wfstp_step_direction USING btree (from_id);


--
-- Name: idx_wfstp_step_direction_on_to; Type: INDEX; Schema: public; Owner: cuba
--

CREATE INDEX idx_wfstp_step_direction_on_to ON wfstp_step_direction USING btree (to_id);


--
-- Name: idx_wfstp_step_on_stage; Type: INDEX; Schema: public; Owner: cuba
--

CREATE INDEX idx_wfstp_step_on_stage ON wfstp_step USING btree (stage_id);


--
-- Name: idx_wfstp_step_on_workflow; Type: INDEX; Schema: public; Owner: cuba
--

CREATE INDEX idx_wfstp_step_on_workflow ON wfstp_step USING btree (workflow_id);


--
-- Name: stage_actors_link fk_staact_on_stage; Type: FK CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY stage_actors_link
    ADD CONSTRAINT fk_staact_on_stage FOREIGN KEY (stage_id) REFERENCES wfstp_stage(id);


--
-- Name: stage_actors_link fk_staact_on_user; Type: FK CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY stage_actors_link
    ADD CONSTRAINT fk_staact_on_user FOREIGN KEY (actor_id) REFERENCES sec_user(id);


--
-- Name: wfstp_step_direction fk_wfstp_step_direction_on_from; Type: FK CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY wfstp_step_direction
    ADD CONSTRAINT fk_wfstp_step_direction_on_from FOREIGN KEY (from_id) REFERENCES wfstp_step(id);


--
-- Name: wfstp_step_direction fk_wfstp_step_direction_on_to; Type: FK CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY wfstp_step_direction
    ADD CONSTRAINT fk_wfstp_step_direction_on_to FOREIGN KEY (to_id) REFERENCES wfstp_step(id);


--
-- Name: wfstp_step fk_wfstp_step_on_stage; Type: FK CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY wfstp_step
    ADD CONSTRAINT fk_wfstp_step_on_stage FOREIGN KEY (stage_id) REFERENCES wfstp_stage(id);


--
-- Name: wfstp_step fk_wfstp_step_on_workflow; Type: FK CONSTRAINT; Schema: public; Owner: cuba
--

ALTER TABLE ONLY wfstp_step
    ADD CONSTRAINT fk_wfstp_step_on_workflow FOREIGN KEY (workflow_id) REFERENCES wfstp_workflow(id);


--
-- PostgreSQL database dump complete
--

